
        /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrameTest.java
 *
 * Created on 2011-3-16, 15:42:33
 */

package RS232;

/**
 *
 * @author ROV03
 */
import java.awt.Graphics;
import java.awt.Color;
public class JFrameTest extends javax.swing.JFrame {
     private static final int N = 250;//采样点的总数
     public int[][] meanValue;//=new int[2*Parameters.RANGE][2*Parameters.RANGE];
     public static final int SIDE = 500;//栅格地图边长
     public static int CELL;// = SIDE/(2*Parameters.RANGE);//栅格地图单位小格的半径
     public static double K=1.0;// = 10;//锐化系数
     //public static int M;//背景去噪阈值
     public static int RESOLUTION;// = 250;//图像分辨率
     //public static Data[] datas = PolarCoordinateToRect.datas;
     //private boolean[][] grid;

    /** Creates new form JFrameTest */
    public JFrameTest() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPShow = new JPanelShowing();
        jPDown = new javax.swing.JPanel();
        jPFunction = new javax.swing.JPanel();
        jLStart_Stop = new javax.swing.JLabel();
        jTBStart_Stop = new javax.swing.JToggleButton();
        jLRadius = new javax.swing.JLabel();
        jCBRadius = new javax.swing.JComboBox();
        jLFunction = new javax.swing.JLabel();
        jPState = new javax.swing.JPanel();
        jLState = new javax.swing.JLabel();
        jLRealTime = new javax.swing.JLabel();
        jRBRealTime = new javax.swing.JRadioButton();
        jLAngel = new javax.swing.JLabel();
        jTFAngel = new javax.swing.JTextField();
        jPSet = new javax.swing.JPanel();
        jLSet = new javax.swing.JLabel();
        jLSharp = new javax.swing.JLabel();
        jCBSharp = new javax.swing.JComboBox();
        jLResolution = new javax.swing.JLabel();
        jCBResolution = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("基于图像声纳的水下机器人地图构建研究");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 502, 0));
        setMinimumSize(new java.awt.Dimension(502, 0));
        setResizable(false);

        jPShow.setMaximumSize(new java.awt.Dimension(502, 32767));
        jPShow.setMinimumSize(new java.awt.Dimension(502, 0));

        javax.swing.GroupLayout jPShowLayout = new javax.swing.GroupLayout(jPShow);
        jPShow.setLayout(jPShowLayout);
        jPShowLayout.setHorizontalGroup(
            jPShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPShowLayout.setVerticalGroup(
            jPShowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 503, Short.MAX_VALUE)
        );

        jPFunction.setMaximumSize(new java.awt.Dimension(167, 329));
        jPFunction.setMinimumSize(new java.awt.Dimension(167, 0));

        jLStart_Stop.setText("开始/停止");
        jLStart_Stop.setAutoscrolls(true);
        jLStart_Stop.setPreferredSize(new java.awt.Dimension(80, 25));

        jTBStart_Stop.setText("Start/Stop");
        jTBStart_Stop.setMaximumSize(new java.awt.Dimension(1000, 1000));
        jTBStart_Stop.setMinimumSize(new java.awt.Dimension(0, 0));
        jTBStart_Stop.setPreferredSize(new java.awt.Dimension(120, 25));
        jTBStart_Stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTBStart_StopActionPerformed(evt);
            }
        });

        jLRadius.setText("声纳扫描半径");
        jLRadius.setMaximumSize(new java.awt.Dimension(78, 15));
        jLRadius.setMinimumSize(new java.awt.Dimension(78, 15));
        jLRadius.setPreferredSize(new java.awt.Dimension(100, 25));

        jCBRadius.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "R=1", "R= 2", "R= 5", "R= 10", "R= 20", "R= 30", "R= 50", "R= 100", "R= 150", "R= 200" }));
        jCBRadius.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBRadiusActionPerformed(evt);
            }
        });

        jLFunction.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLFunction.setText("      功能栏");
        jLFunction.setPreferredSize(new java.awt.Dimension(190, 30));

        javax.swing.GroupLayout jPFunctionLayout = new javax.swing.GroupLayout(jPFunction);
        jPFunction.setLayout(jPFunctionLayout);
        jPFunctionLayout.setHorizontalGroup(
            jPFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCBRadius, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLRadius, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLStart_Stop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jTBStart_Stop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLFunction, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPFunctionLayout.setVerticalGroup(
            jPFunctionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPFunctionLayout.createSequentialGroup()
                .addComponent(jLFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLStart_Stop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTBStart_Stop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCBRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLStart_Stop.getAccessibleContext().setAccessibleName("            开始/停止");

        jLState.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLState.setText("     状态栏");
        jLState.setPreferredSize(new java.awt.Dimension(200, 30));

        jLRealTime.setText("在线/离线");
        jLRealTime.setPreferredSize(new java.awt.Dimension(80, 25));

        jRBRealTime.setText("RealTime");
        jRBRealTime.setMinimumSize(new java.awt.Dimension(0, 0));
        jRBRealTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBRealTimeActionPerformed(evt);
            }
        });

        jLAngel.setText("角度");
        jLAngel.setPreferredSize(new java.awt.Dimension(120, 25));

        jTFAngel.setText("        ");
        jTFAngel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFAngelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPStateLayout = new javax.swing.GroupLayout(jPState);
        jPState.setLayout(jPStateLayout);
        jPStateLayout.setHorizontalGroup(
            jPStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLAngel, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
            .addComponent(jLState, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
            .addComponent(jRBRealTime, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
            .addComponent(jTFAngel, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
            .addComponent(jLRealTime, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
        );
        jPStateLayout.setVerticalGroup(
            jPStateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPStateLayout.createSequentialGroup()
                .addComponent(jLState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLRealTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRBRealTime, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLAngel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(jTFAngel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
        );

        jLSet.setFont(new java.awt.Font("宋体", 0, 18)); // NOI18N
        jLSet.setText("    设置栏");
        jLSet.setPreferredSize(new java.awt.Dimension(250, 30));

        jLSharp.setText("图像锐化系数");
        jLSharp.setMaximumSize(new java.awt.Dimension(90, 25));
        jLSharp.setMinimumSize(new java.awt.Dimension(90, 20));
        jLSharp.setPreferredSize(new java.awt.Dimension(90, 25));

        jCBSharp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "K=1", "K=1.2", "K=1.5", "K=2" }));
        jCBSharp.setMinimumSize(new java.awt.Dimension(25, 25));
        jCBSharp.setPreferredSize(new java.awt.Dimension(80, 25));
        jCBSharp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBSharpActionPerformed(evt);
            }
        });

        jLResolution.setText("图像分辨率");
        jLResolution.setMaximumSize(new java.awt.Dimension(120, 25));
        jLResolution.setMinimumSize(new java.awt.Dimension(120, 20));
        jLResolution.setPreferredSize(new java.awt.Dimension(120, 25));

        jCBResolution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "r=250", "r=125", "r=50", "r=25" }));
        jCBResolution.setMinimumSize(new java.awt.Dimension(50, 20));
        jCBResolution.setPreferredSize(new java.awt.Dimension(80, 25));
        jCBResolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBResolutionActionPerformed(evt);
            }
        });
        jCBResolution.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCBResolutionPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout jPSetLayout = new javax.swing.GroupLayout(jPSet);
        jPSet.setLayout(jPSetLayout);
        jPSetLayout.setHorizontalGroup(
            jPSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSetLayout.createSequentialGroup()
                .addGroup(jPSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCBSharp, 0, 147, Short.MAX_VALUE)
                    .addComponent(jLSet, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(jLSharp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(jLResolution, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(jCBResolution, javax.swing.GroupLayout.Alignment.TRAILING, 0, 147, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPSetLayout.setVerticalGroup(
            jPSetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSetLayout.createSequentialGroup()
                .addComponent(jLSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jLSharp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCBSharp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(jLResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jCBResolution, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPDownLayout = new javax.swing.GroupLayout(jPDown);
        jPDown.setLayout(jPDownLayout);
        jPDownLayout.setHorizontalGroup(
            jPDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPDownLayout.createSequentialGroup()
                .addComponent(jPFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 163, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPDownLayout.setVerticalGroup(
            jPDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPDownLayout.createSequentialGroup()
                .addGroup(jPDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPDownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jPFunction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPSet, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPShow, javax.swing.GroupLayout.PREFERRED_SIZE, 499, Short.MAX_VALUE)
            .addComponent(jPDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPShow, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPDown, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTBStart_StopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTBStart_StopActionPerformed
        // TODO add your handling code here:
        //SerialThread.sonarHead = false;
        //System.out.println(CELL);

        //图像分辨率的选择
        int selectedR = jCBResolution.getSelectedIndex();
        switch(selectedR){
            case 0: Parameters.RANGE=250;   break;
            case 1: Parameters.RANGE=125;   break;
            case 2: Parameters.RANGE=50;    break;
            case 3: Parameters.RANGE=25;    break;
            default:Parameters.RANGE=250;//System.out.println("Error");
        }
        meanValue=new int[2*Parameters.RANGE][2*Parameters.RANGE];
        CELL = 1;//SIDE/(2*Parameters.RANGE);
        if(jTBStart_Stop.isSelected()){
              new Thread(){
            @Override
            public void run(){
                PolarCoordinateToRect pTr = new PolarCoordinateToRect();
                pTr.start();
//                System.out.println(jLAngel.getText());
                while(true){
                    
                    //if(jRadioButton1.isSelected())   SerialThread.sonarHead = true;
                    //else    SerialThread.sonarHead = false;
                    if(Parameters.drawReady){
                        jTFAngel.setText((Double.toString((int)(Parameters.angle*10)/10.0)));
                        for(int i=0;i<N;i++){
                            upDate(pTr.datas[i].x+250 ,pTr.datas[i].y+250,pTr.datas[i].potence);
//                            System.out.println(pTr.datas[i].x);
//                            System.out.println(pTr.datas[i].y);
//                            System.out.println(pTr.datas[i].potence);
                        }
                ///******    for(int i=0;i<2*Parameters.RANGE;i++){
                ///******    for(int j=0;j<2*Parameters.RANGE;j++){
                ///******        if(pTr.mapContent[i][j].revoked){
                ///******            //单元被激活
                ///******            meanValue[i][j] = pTr.mapContent[i][j].calMeanValue();
                ///******            //if(meanValue[i][j]>20)
                ///******            //    meanValue[i][j] = 0;
                ///******            upDate(i,j);
                ///******            pTr.mapContent[i][j].revoked = false;
                ///******        }
                ///******    }
                        Parameters.drawReady = false;
                }
                
                   else
                       try {
                        Thread.currentThread().sleep(5);
                    } catch (InterruptedException ex) {
                        //Logger.getLogger(ShowFrame.class.getName()).log(Level.SEVERE, null, ex);
                   }
                }
            }
            }.start();}
//        else
//        System.exit(0);
    }//GEN-LAST:event_jTBStart_StopActionPerformed

    private void jRBRealTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBRealTimeActionPerformed
        // TODO add your handling code here:
        // 数据是否来源于在线
        SerialThread.sonarHead = jRBRealTime.isSelected();
        //System.out.println(jRadioButton1.isSelected());
    }//GEN-LAST:event_jRBRealTimeActionPerformed

    private void jCBRadiusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBRadiusActionPerformed
        // TODO add your handling code here:
        //扫描半径的选择
        //1, 2, 5, 10, 20, 30, 50, 100, 150, 200
   //     int index = jCBRadius.getSelectedIndex();
     //   switch(index){
       //     case 0:Parameters.commandBytes[3]=1;    break;
         //   case 1:Parameters.commandBytes[3]=2;    break;
         //   case 2:Parameters.commandBytes[3]=5;    break;
          ///  case 3:Parameters.commandBytes[3]=10;   break;
           // case 4:Parameters.commandBytes[3]=20;   break;
           // case 5:Parameters.commandBytes[3]=30;   break;
           // case 6:Parameters.commandBytes[3]=50;   break;
           // case 7:Parameters.commandBytes[3]=100;  break;
            //case 8:Parameters.commandBytes[3]=-106; break; //byte范围在-128到127，大于127的数，要进行映射
            //case 9:Parameters.commandBytes[3]=-56;  break;
            //default:System.out.println("ERROR");
        //}
    }//GEN-LAST:event_jCBRadiusActionPerformed

    private void jCBSharpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBSharpActionPerformed
        // TODO add your handling code here:
        //锐化系数的选择
        int selectedK = jCBSharp.getSelectedIndex();
        switch(selectedK){
            case 0: K=1;break;
            case 1: K=1.2;break;
            case 2: K=1.5;break;
            case 3: K=2;break;
            default:System.out.println("ERROR");
        }
}//GEN-LAST:event_jCBSharpActionPerformed

    private void jCBResolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBResolutionActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jCBResolutionActionPerformed

    private void jTFAngelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFAngelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFAngelActionPerformed

    private void jCBResolutionPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCBResolutionPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBResolutionPropertyChange

   public void upDate(int i,int j){//i,j表示栅格数组的位置
        Graphics g = this.getGraphics();
        Graphics gTemp = g;
        gTemp.setColor(new Color((int)K*meanValue[i][j],(int)K*meanValue[i][j],(int)K*meanValue[i][j]));
        gTemp.clearRect(3+i*CELL,26+SIDE-(j+1)*CELL, CELL, CELL);//清除原背景色
        gTemp.fillRect(3+i*CELL,26+SIDE-(j+1)*CELL, CELL, CELL);
        gTemp.dispose();
    }

   //*****
   public void upDate(int i,int j,int potence){//i,j表示栅格数组的位置
        Graphics g = this.getGraphics();
        Graphics gTemp = g;
        gTemp.setColor(new Color((int)K*potence,(int)K*potence,(int)K*potence));
        gTemp.clearRect(3+i*CELL,26+SIDE-(j+1)*CELL, CELL, CELL);//清除原背景色
        gTemp.fillRect(3+i*CELL,26+SIDE-(j+1)*CELL, CELL, CELL);
        gTemp.dispose();
    }
   //*****

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameTest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jCBRadius;
    private javax.swing.JComboBox jCBResolution;
    private javax.swing.JComboBox jCBSharp;
    private javax.swing.JLabel jLAngel;
    private javax.swing.JLabel jLFunction;
    private javax.swing.JLabel jLRadius;
    private javax.swing.JLabel jLRealTime;
    private javax.swing.JLabel jLResolution;
    private javax.swing.JLabel jLSet;
    private javax.swing.JLabel jLSharp;
    private javax.swing.JLabel jLStart_Stop;
    private javax.swing.JLabel jLState;
    private javax.swing.JPanel jPDown;
    private javax.swing.JPanel jPFunction;
    private javax.swing.JPanel jPSet;
    private javax.swing.JPanel jPShow;
    private javax.swing.JPanel jPState;
    private javax.swing.JRadioButton jRBRealTime;
    private javax.swing.JToggleButton jTBStart_Stop;
    private javax.swing.JTextField jTFAngel;
    // End of variables declaration//GEN-END:variables

}
